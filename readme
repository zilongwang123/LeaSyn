To replay the experiment, you need to 
    1. compile the addmodule pass in the secretyosys by just running "make", and move "addmodule.so" to the folder "hwcontracts/code/verification/addobsmodule.so"
    2. change the yosys path in the configuration file to the secretyosys folder.
    3. run "python3  cli.py configfile"

The configuration I have already test is: 
    config/countdown-2way.yaml
    config/pipeline_mul-2way.yaml


* benchmarks folder:
    Contains the verilog code of design and also a template "prod.v"

* config
    Contains the configuration files which contain the input/output information, frontend/backend information, and also information about invariant, contracts and target.

The work flow of the tool is like:
 1. cope the benchmark to the output folder.
 2. flatten the design.
 3. create invariant modules, observation modules and state modules. 
 4. add these modules to the main design.
 5. create the product module withe the help of the template "prod.v".
 6. set prod as the top module flatten the design, and translate it to a BMC problem in "prod.smt".
 7. invoke the backend to solve the BMC problem.
 8. if the checker returns failed, invoke the "iverilog" and "vvp" to analyse the counterexample.

 The steps 2-4 are implement in "testOut/trg_yosys.script";
 The steps 5-6 are implement in "testOut/yosys_verification.script";